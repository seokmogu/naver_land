#!/usr/bin/env python3
"""
Ïä§ÌÇ§Îßà ÏàòÏ†ïÏÇ¨Ìï≠ Î∞∞Ìè¨ Î∞è Í≤ÄÏ¶ù Ïä§ÌÅ¨Î¶ΩÌä∏
- SQL ÌååÏùºÏùÑ ÏùΩÏñ¥ÏÑú SupabaseÏóê Î∞∞Ìè¨ Í∞ÄÎä•Ìïú ÌòïÌÉúÎ°ú Ï†úÍ≥µ
- Î∞∞Ìè¨ ÌõÑ Í≤ÄÏ¶ù ÌÖåÏä§Ìä∏ Ïã§Ìñâ
"""

import os
import sys
from pathlib import Path
from supabase import create_client
import subprocess
import json

class SchemaDeploymentManager:
    def __init__(self):
        """Î∞∞Ìè¨ Í¥ÄÎ¶¨Ïûê Ï¥àÍ∏∞Ìôî"""
        self.supabase_url = 'https://eslhavjipwbyvbbknixv.supabase.co'
        self.supabase_key = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVzbGhhdmppcHdieXZiYmtuaXh2Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDI5OTUxMSwiZXhwIjoyMDY5ODc1NTExfQ.p6JB5xrdLi_yBJTuHg2mF9TZFQiwA4Tqd0hc-7FxFqE'
        
        self.client = create_client(self.supabase_url, self.supabase_key)
        
        print("üöÄ Ïä§ÌÇ§Îßà Î∞∞Ìè¨ Í¥ÄÎ¶¨Ïûê Ï¥àÍ∏∞Ìôî")
    
    def create_individual_sql_files(self):
        """Í∞Å Íµ¨ÏÑ± ÏöîÏÜåÎ≥ÑÎ°ú Í∞úÎ≥Ñ SQL ÌååÏùº ÏÉùÏÑ±"""
        print("\nüìÑ Í∞úÎ≥Ñ SQL ÌååÏùº ÏÉùÏÑ± Ï§ë...")
        
        sql_components = {
            'create_missing_tables.sql': self._get_table_creation_sql(),
            'add_missing_columns.sql': self._get_column_addition_sql(),
            'create_indexes.sql': self._get_index_creation_sql(),
            'create_views.sql': self._get_view_creation_sql(),
            'create_triggers.sql': self._get_trigger_creation_sql()
        }
        
        created_files = []
        for filename, sql_content in sql_components.items():
            file_path = Path(__file__).parent / filename
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(sql_content)
            
            created_files.append(str(file_path))
            print(f"   ‚úÖ {filename} ÏÉùÏÑ± ÏôÑÎ£å")
        
        return created_files
    
    def _get_table_creation_sql(self) -> str:
        """ÌÖåÏù¥Î∏î ÏÉùÏÑ± SQL"""
        return """-- =============================================================================
-- ÎàÑÎùΩÎêú ÌÖåÏù¥Î∏î ÏÉùÏÑ±
-- =============================================================================

-- 1. property_tax_info ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS property_tax_info (
    id BIGSERIAL PRIMARY KEY,
    property_id BIGINT REFERENCES properties_new(id) ON DELETE CASCADE,
    
    acquisition_tax INTEGER DEFAULT 0,
    acquisition_tax_rate DECIMAL(5, 4) DEFAULT 0.0000,
    registration_tax INTEGER DEFAULT 0,
    registration_tax_rate DECIMAL(5, 4) DEFAULT 0.0000,
    brokerage_fee INTEGER DEFAULT 0,
    brokerage_fee_rate DECIMAL(5, 4) DEFAULT 0.0000,
    stamp_duty INTEGER DEFAULT 0,
    vat INTEGER DEFAULT 0,
    total_tax INTEGER DEFAULT 0,
    total_cost INTEGER DEFAULT 0,
    
    calculation_date DATE DEFAULT CURRENT_DATE,
    is_estimated BOOLEAN DEFAULT false,
    notes TEXT,
    
    CONSTRAINT chk_tax_amounts CHECK (
        acquisition_tax >= 0 AND registration_tax >= 0 AND 
        brokerage_fee >= 0 AND stamp_duty >= 0 AND 
        vat >= 0 AND total_tax >= 0 AND total_cost >= 0
    ),
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2. property_price_comparison ÌÖåÏù¥Î∏î
CREATE TABLE IF NOT EXISTS property_price_comparison (
    id BIGSERIAL PRIMARY KEY,
    property_id BIGINT REFERENCES properties_new(id) ON DELETE CASCADE,
    
    same_addr_count INTEGER DEFAULT 0,
    same_addr_max_price BIGINT,
    same_addr_min_price BIGINT,
    cpid VARCHAR(50),
    complex_name VARCHAR(200),
    article_feature_desc TEXT,
    market_data_date DATE DEFAULT CURRENT_DATE,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT chk_price_comparison_logic 
    CHECK (same_addr_max_price IS NULL OR same_addr_min_price IS NULL OR same_addr_max_price >= same_addr_min_price),
    CONSTRAINT chk_same_addr_count_positive 
    CHECK (same_addr_count >= 0)
);

-- 3. property_facilities ÌÖåÏù¥Î∏î (ÌôïÏù∏ Î∞è ÏÉùÏÑ±)
CREATE TABLE IF NOT EXISTS property_facilities (
    id BIGSERIAL PRIMARY KEY,
    property_id BIGINT REFERENCES properties_new(id) ON DELETE CASCADE,
    facility_id INTEGER REFERENCES facility_types(id),
    
    available BOOLEAN DEFAULT true,
    condition_grade INTEGER CHECK (condition_grade >= 1 AND condition_grade <= 5),
    notes VARCHAR(200),
    last_checked DATE,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
"""
    
    def _get_column_addition_sql(self) -> str:
        """Ïª¨Îüº Ï∂îÍ∞Ä SQL"""
        return """-- =============================================================================
-- Í∏∞Ï°¥ ÌÖåÏù¥Î∏îÏóê ÎàÑÎùΩÎêú Ïª¨Îüº Ï∂îÍ∞Ä
-- =============================================================================

-- property_locations ÌÖåÏù¥Î∏î ÌôïÏû•
ALTER TABLE property_locations ADD COLUMN IF NOT EXISTS nearest_station TEXT;
ALTER TABLE property_locations ADD COLUMN IF NOT EXISTS subway_stations JSONB;
ALTER TABLE property_locations ADD COLUMN IF NOT EXISTS detail_address VARCHAR(500);

-- property_physical ÌÖåÏù¥Î∏î ÌôïÏû•  
ALTER TABLE property_physical ADD COLUMN IF NOT EXISTS veranda_count INTEGER DEFAULT 0;
ALTER TABLE property_physical ADD COLUMN IF NOT EXISTS space_type VARCHAR(100);
ALTER TABLE property_physical ADD COLUMN IF NOT EXISTS structure_type VARCHAR(100);
ALTER TABLE property_physical ADD COLUMN IF NOT EXISTS floor_description TEXT;
ALTER TABLE property_physical ADD COLUMN IF NOT EXISTS ground_floor_count INTEGER;
ALTER TABLE property_physical ADD COLUMN IF NOT EXISTS monthly_management_cost INTEGER;
ALTER TABLE property_physical ADD COLUMN IF NOT EXISTS management_office_tel VARCHAR(20);
ALTER TABLE property_physical ADD COLUMN IF NOT EXISTS move_in_type VARCHAR(50);
ALTER TABLE property_physical ADD COLUMN IF NOT EXISTS move_in_discussion BOOLEAN DEFAULT false;

-- properties_new ÌÖåÏù¥Î∏î ÌôïÏû•
ALTER TABLE properties_new ADD COLUMN IF NOT EXISTS building_use VARCHAR(100);
ALTER TABLE properties_new ADD COLUMN IF NOT EXISTS law_usage VARCHAR(100);
ALTER TABLE properties_new ADD COLUMN IF NOT EXISTS floor_layer_name VARCHAR(100);
"""
    
    def _get_index_creation_sql(self) -> str:
        """Ïù∏Îç±Ïä§ ÏÉùÏÑ± SQL"""
        return """-- =============================================================================
-- ÏÑ±Îä• ÏµúÏ†ÅÌôî Ïù∏Îç±Ïä§ ÏÉùÏÑ±
-- =============================================================================

-- ÏÉà ÌÖåÏù¥Î∏î Ïù∏Îç±Ïä§
CREATE INDEX IF NOT EXISTS idx_property_tax_info_property ON property_tax_info(property_id);
CREATE INDEX IF NOT EXISTS idx_property_tax_info_total_cost ON property_tax_info(total_cost);

CREATE INDEX IF NOT EXISTS idx_property_price_comparison_property ON property_price_comparison(property_id);
CREATE INDEX IF NOT EXISTS idx_property_price_comparison_complex ON property_price_comparison(cpid, complex_name);

CREATE INDEX IF NOT EXISTS idx_property_facilities_property ON property_facilities(property_id);
CREATE INDEX IF NOT EXISTS idx_property_facilities_type ON property_facilities(facility_id, available);

-- ÏÉà Ïª¨Îüº Ïù∏Îç±Ïä§
CREATE INDEX IF NOT EXISTS idx_property_locations_subway ON property_locations USING GIN (subway_stations);
CREATE INDEX IF NOT EXISTS idx_property_physical_space_type ON property_physical(space_type);
CREATE INDEX IF NOT EXISTS idx_property_physical_management_cost ON property_physical(monthly_management_cost);
CREATE INDEX IF NOT EXISTS idx_properties_new_law_usage ON properties_new(law_usage);
"""
    
    def _get_view_creation_sql(self) -> str:
        """Î∑∞ ÏÉùÏÑ± SQL"""
        return """-- =============================================================================
-- Îç∞Ïù¥ÌÑ∞ ÌíàÏßà Í≤ÄÏ¶ù Î∑∞ ÏÉùÏÑ±
-- =============================================================================

-- 1. Îç∞Ïù¥ÌÑ∞ ÏôÑÏÑ±ÎèÑ Ï≤¥ÌÅ¨ Î∑∞
CREATE OR REPLACE VIEW data_completeness_check AS
SELECT 
    'property_basic' as table_name,
    COUNT(*) as total_records,
    COUNT(article_name) as has_article_name,
    COUNT(real_estate_type_id) as has_real_estate_type,
    ROUND(COUNT(article_name)::decimal / NULLIF(COUNT(*), 0) * 100, 2) as completeness_pct
FROM properties_new
WHERE is_active = true
UNION ALL
SELECT 
    'property_physical' as table_name,
    COUNT(*) as total_records,
    COUNT(area_exclusive) as has_area_exclusive,
    COUNT(space_type) as has_space_type,
    ROUND(COUNT(area_exclusive)::decimal / NULLIF(COUNT(*), 0) * 100, 2) as completeness_pct
FROM property_physical
UNION ALL
SELECT 
    'property_tax_info' as table_name,
    COUNT(*) as total_records,
    COUNT(total_tax) as has_tax_calculation,
    COUNT(total_cost) as has_total_cost,
    ROUND(COUNT(total_tax)::decimal / NULLIF(COUNT(*), 0) * 100, 2) as completeness_pct
FROM property_tax_info;
"""
    
    def _get_trigger_creation_sql(self) -> str:
        """Ìä∏Î¶¨Í±∞ ÏÉùÏÑ± SQL"""
        return """-- =============================================================================
-- ÏûêÎèô Í≥ÑÏÇ∞ Ìä∏Î¶¨Í±∞ ÏÉùÏÑ±
-- =============================================================================

-- ÏÑ∏Í∏à Ï¥ùÏï° ÏûêÎèô Í≥ÑÏÇ∞ Ìï®Ïàò
CREATE OR REPLACE FUNCTION calculate_total_tax_cost()
RETURNS TRIGGER AS $$
BEGIN
    NEW.total_tax = COALESCE(NEW.acquisition_tax, 0) + 
                   COALESCE(NEW.registration_tax, 0) + 
                   COALESCE(NEW.stamp_duty, 0) + 
                   COALESCE(NEW.vat, 0);
    
    NEW.total_cost = NEW.total_tax + COALESCE(NEW.brokerage_fee, 0);
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Ìä∏Î¶¨Í±∞ ÏÉùÏÑ±
DROP TRIGGER IF EXISTS calculate_tax_totals_trigger ON property_tax_info;
CREATE TRIGGER calculate_tax_totals_trigger
    BEFORE INSERT OR UPDATE ON property_tax_info
    FOR EACH ROW EXECUTE FUNCTION calculate_total_tax_cost();

DROP TRIGGER IF EXISTS update_property_tax_info_updated_at ON property_tax_info;
CREATE TRIGGER update_property_tax_info_updated_at 
    BEFORE UPDATE ON property_tax_info 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
"""
    
    def generate_deployment_instructions(self, sql_files: list):
        """Î∞∞Ìè¨ ÏßÄÏπ® ÏÉùÏÑ±"""
        instructions = f"""
üöÄ ÎÑ§Ïù¥Î≤Ñ Î∂ÄÎèôÏÇ∞ ÏàòÏßëÍ∏∞ - Ïä§ÌÇ§Îßà ÏàòÏ†ï Î∞∞Ìè¨ Í∞ÄÏù¥Îìú
================================================================

üìã Î∞∞Ìè¨Ìï¥Ïïº Ìï† SQL ÌååÏùºÎì§:
"""
        
        for i, file_path in enumerate(sql_files, 1):
            filename = Path(file_path).name
            instructions += f"{i}. {filename}\n"
        
        instructions += f"""
üéØ Î∞∞Ìè¨ Î∞©Î≤ï 1: Supabase Dashboard ÏÇ¨Ïö© (Í∂åÏû•)
----------------------------------------------------------------
1. https://supabase.com/dashboard Î°úÍ∑∏Ïù∏
2. ÌîÑÎ°úÏ†ùÌä∏ ÏÑ†ÌÉù: eslhavjipwbyvbbknixv
3. SQL Editor Î©îÎâ¥ ÏÑ†ÌÉù
4. ÏúÑ SQL ÌååÏùºÎì§ÏùÑ ÏàúÏÑúÎåÄÎ°ú Î≥µÏÇ¨-Î∂ôÏó¨ÎÑ£Í∏∞ Ïã§Ìñâ

üéØ Î∞∞Ìè¨ Î∞©Î≤ï 2: psql Î™ÖÎ†πÏ§Ñ ÏÇ¨Ïö©
----------------------------------------------------------------
psql Ïó∞Í≤∞ Ï†ïÎ≥¥Í∞Ä ÏûàÎã§Î©¥:
"""
        
        for file_path in sql_files:
            filename = Path(file_path).name
            instructions += f"psql -h <host> -d <database> -U <username> -f {filename}\n"
        
        instructions += f"""
‚ö†Ô∏è Ï£ºÏùòÏÇ¨Ìï≠:
----------------------------------------------------------------
- ÌååÏùº ÏàúÏÑúÎåÄÎ°ú Ïã§ÌñâÌï¥Ïïº Ìï©ÎãàÎã§ (ÏùòÏ°¥ÏÑ± Î¨∏Ï†ú)
- Ïò§Î•òÍ∞Ä Î∞úÏÉùÌï¥ÎèÑ ÎåÄÎ∂ÄÎ∂Ñ "Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï®" Ïò§Î•òÏù¥ÎØÄÎ°ú Î¨¥Ïãú Í∞ÄÎä•
- Ïã§Ìñâ ÌõÑ test_schema_deployment.pyÎ°ú Í≤ÄÏ¶ù ÌïÑÏàò

‚úÖ Î∞∞Ìè¨ ÌõÑ Í≤ÄÏ¶ù:
----------------------------------------------------------------
python test_schema_deployment.py

üéâ ÏÑ±Í≥µÌïòÎ©¥ Îç∞Ïù¥ÌÑ∞ ÏàòÏßëÍ∏∞ ÏãúÏûë:
----------------------------------------------------------------
python enhanced_data_collector.py
"""
        
        instructions_file = Path(__file__).parent / "DEPLOYMENT_INSTRUCTIONS.md"
        with open(instructions_file, 'w', encoding='utf-8') as f:
            f.write(instructions)
        
        print(f"\nüìã Î∞∞Ìè¨ Í∞ÄÏù¥Îìú ÏÉùÏÑ±: {instructions_file}")
        return str(instructions_file)
    
    def run_post_deployment_validation(self):
        """Î∞∞Ìè¨ ÌõÑ Í≤ÄÏ¶ù ÌÖåÏä§Ìä∏"""
        print("\nüß™ Î∞∞Ìè¨ ÌõÑ Í≤ÄÏ¶ù ÌÖåÏä§Ìä∏ Ïã§Ìñâ...")
        
        try:
            test_script = Path(__file__).parent / "test_schema_deployment.py"
            if test_script.exists():
                result = subprocess.run([
                    sys.executable, str(test_script)
                ], capture_output=True, text=True, timeout=120)
                
                print("üìä Í≤ÄÏ¶ù Í≤∞Í≥º:")
                if result.returncode == 0:
                    print("‚úÖ Í≤ÄÏ¶ù ÏÑ±Í≥µ!")
                    print(result.stdout[-500:])  # ÎßàÏßÄÎßâ 500Ïûê
                else:
                    print("‚ö†Ô∏è Í≤ÄÏ¶ùÏóêÏÑú ÏùºÎ∂Ä Î¨∏Ï†ú Î∞úÍ≤¨")
                    print(result.stderr[-300:])  # Ïò§Î•ò Î©îÏãúÏßÄ
                    
                return result.returncode == 0
            else:
                print("‚ö†Ô∏è Í≤ÄÏ¶ù Ïä§ÌÅ¨Î¶ΩÌä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")
                return False
                
        except Exception as e:
            print(f"‚ùå Í≤ÄÏ¶ù Ïã§Ìñâ Ïò§Î•ò: {e}")
            return False
    
    def execute_full_deployment(self):
        """Ï†ÑÏ≤¥ Î∞∞Ìè¨ ÌîÑÎ°úÏÑ∏Ïä§ Ïã§Ìñâ"""
        print("üöÄ Ïä§ÌÇ§Îßà ÏàòÏ†ïÏÇ¨Ìï≠ Ï†ÑÏ≤¥ Î∞∞Ìè¨ ÌîÑÎ°úÏÑ∏Ïä§")
        print("=" * 60)
        
        # 1. Í∞úÎ≥Ñ SQL ÌååÏùº ÏÉùÏÑ±
        print("\nüìã 1Îã®Í≥Ñ: Í∞úÎ≥Ñ SQL ÌååÏùº ÏÉùÏÑ±")
        sql_files = self.create_individual_sql_files()
        
        # 2. Î∞∞Ìè¨ Í∞ÄÏù¥Îìú ÏÉùÏÑ±
        print("\nüìã 2Îã®Í≥Ñ: Î∞∞Ìè¨ Í∞ÄÏù¥Îìú ÏÉùÏÑ±")
        instructions_file = self.generate_deployment_instructions(sql_files)
        
        # 3. ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏
        print("\nüìã 3Îã®Í≥Ñ: ÌòÑÏû¨ Ïä§ÌÇ§Îßà ÏÉÅÌÉú ÌôïÏù∏")
        self._check_current_schema_status()
        
        print("\n" + "=" * 60)
        print("üìä Î∞∞Ìè¨ Ï§ÄÎπÑ ÏôÑÎ£å!")
        print("=" * 60)
        
        print(f"‚úÖ {len(sql_files)}Í∞ú SQL ÌååÏùº ÏÉùÏÑ± ÏôÑÎ£å")
        print(f"‚úÖ Î∞∞Ìè¨ Í∞ÄÏù¥Îìú ÏÉùÏÑ±: {Path(instructions_file).name}")
        
        print(f"\nüéØ Îã§Ïùå Îã®Í≥Ñ:")
        print(f"1. {Path(instructions_file).name} ÌååÏùºÏùÑ Ïó¥Ïñ¥ÏÑú Î∞∞Ìè¨ Í∞ÄÏù¥Îìú ÌôïÏù∏")
        print(f"2. Supabase DashboardÏóêÏÑú SQL ÌååÏùºÎì§ ÏàúÏÑúÎåÄÎ°ú Ïã§Ìñâ")
        print(f"3. python test_schema_deployment.pyÎ°ú Í≤ÄÏ¶ù")
        print(f"4. ÏÑ±Í≥µÌïòÎ©¥ enhanced_data_collector.pyÎ°ú ÏàòÏßë ÏãúÏûë")
        
        return True
    
    def _check_current_schema_status(self):
        """ÌòÑÏû¨ Ïä§ÌÇ§Îßà ÏÉÅÌÉú ÌôïÏù∏"""
        print("   üìä ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉÅÌÉú:")
        
        critical_components = {
            'property_tax_info': self._table_exists('property_tax_info'),
            'property_price_comparison': self._table_exists('property_price_comparison'),
            'property_facilities': self._table_exists('property_facilities'),
            'space_type Ïª¨Îüº': self._column_accessible('property_physical', 'space_type'),
            'law_usage Ïª¨Îüº': self._column_accessible('properties_new', 'law_usage')
        }
        
        for component, exists in critical_components.items():
            status = "‚úÖ Ï°¥Ïû¨" if exists else "‚ùå ÎàÑÎùΩ"
            print(f"      {status} {component}")
    
    def _table_exists(self, table_name: str) -> bool:
        """ÌÖåÏù¥Î∏î Ï°¥Ïû¨ ÌôïÏù∏"""
        try:
            self.client.table(table_name).select('count', count='exact').limit(0).execute()
            return True
        except:
            return False
    
    def _column_accessible(self, table_name: str, column_name: str) -> bool:
        """Ïª¨Îüº Ï†ëÍ∑º Í∞ÄÎä•ÏÑ± ÌôïÏù∏"""
        try:
            self.client.table(table_name).select(column_name).limit(1).execute()
            return True
        except:
            return False

def main():
    """Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò"""
    print("üîß ÎÑ§Ïù¥Î≤Ñ Î∂ÄÎèôÏÇ∞ ÏàòÏßëÍ∏∞ - Ïä§ÌÇ§Îßà Î∞∞Ìè¨ Í¥ÄÎ¶¨Ïûê")
    
    manager = SchemaDeploymentManager()
    success = manager.execute_full_deployment()
    
    if success:
        print("\nüéâ Î∞∞Ìè¨ Ï§ÄÎπÑÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!")
        print("üìã DEPLOYMENT_INSTRUCTIONS.mdÎ•º Ï∞∏Í≥†ÌïòÏó¨ Î∞∞Ìè¨Î•º ÏßÑÌñâÌïòÏÑ∏Ïöî.")
    else:
        print("\n‚ùå Î∞∞Ìè¨ Ï§ÄÎπÑ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)